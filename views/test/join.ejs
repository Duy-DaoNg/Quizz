<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bootstrap-4/bootstrap-4.css" rel="stylesheet">
    
    <style>
        :root {
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --info-color: #3b82f6;
            --dark-color: #1e293b;
            --light-color: #f8fafc;
            --border-radius: 16px;
            --shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 25px 50px rgba(0, 0, 0, 0.15);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        * {
            font-family: 'Inter', sans-serif;
        }

        body {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            position: relative;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }

        .join-container {
            width: 100%;
            max-width: 500px;
            margin: 0 auto;
        }

        .join-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-lg);
            overflow: hidden;
            transition: var(--transition);
        }

        .join-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.15);
        }

        .card-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: white;
            padding: 2rem;
            text-align: center;
            border: none;
            position: relative;
        }

        .card-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 150px;
            height: 150px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(25%, -25%);
        }

        .header-icon {
            width: 70px;
            height: 70px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 1.75rem;
            position: relative;
            z-index: 2;
        }

        .card-title {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 2;
        }

        .test-code-badge {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 1.1rem;
            font-weight: 600;
            letter-spacing: 2px;
            margin-bottom: 1rem;
            position: relative;
            z-index: 2;
        }

        .card-subtitle {
            font-size: 1rem;
            opacity: 0.9;
            font-weight: 400;
            line-height: 1.5;
            margin: 0;
            position: relative;
            z-index: 2;
        }

        .card-body {
            padding: 2rem;
        }

        .test-info {
            background: linear-gradient(135deg, #f0f7ff 0%, #e0f2fe 100%);
            border: 1px solid #bae6fd;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .test-info-title {
            color: var(--info-color);
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-grid {
            display: grid;
            gap: 1rem;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        }

        .info-item {
            text-align: center;
            padding: 0.75rem;
            background: white;
            border-radius: 8px;
            border: 1px solid rgba(59, 130, 246, 0.1);
        }

        .info-value {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--info-color);
            display: block;
        }

        .info-label {
            font-size: 0.875rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        .form-floating {
            margin-bottom: 1.5rem;
        }

        .form-control {
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 1rem 1.25rem;
            font-size: 1rem;
            transition: var(--transition);
            background: #f8fafc;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            background: white;
            outline: none;
        }

        .form-floating > label {
            color: #64748b;
            font-weight: 500;
            left: 1.25rem;
        }

        .btn-join {
            background: linear-gradient(135deg, var(--success-color) 0%, #059669 100%);
            border: none;
            border-radius: 12px;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            color: white;
            width: 100%;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
            position: relative;
            overflow: hidden;
        }

        .btn-join::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn-join:hover::before {
            left: 100%;
        }

        .btn-join:hover {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
            color: white;
        }

        .btn-join:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .status-badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-waiting {
            background: linear-gradient(135deg, var(--warning-color), #d97706);
            color: white;
        }

        .status-active {
            background: linear-gradient(135deg, var(--success-color), #059669);
            color: white;
        }

        .alert-custom {
            border: none;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            margin-bottom: 1.5rem;
        }

        .alert-info-custom {
            background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
            color: #1e40af;
            border-left: 4px solid var(--info-color);
        }

        .fade-in {
            animation: fadeIn 0.8s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 576px) {
            .join-container {
                padding: 0 10px;
            }
            
            .card-header {
                padding: 1.5rem 1rem;
            }
            
            .card-body {
                padding: 1.5rem 1rem;
            }
            
            .card-title {
                font-size: 1.5rem;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="join-container fade-in">
        <div class="card join-card">
            <div class="card-header">
                <div class="header-icon">
                    <i class="fas fa-rocket"></i>
                </div>
                <h1 class="card-title">Join Test</h1>
                <div class="test-code-badge"><%= test.testCode %></div>
                <p class="card-subtitle">Ready to start your quiz adventure?</p>
            </div>
            
            <div class="card-body">
                <!-- Test Information -->
                <div class="test-info">
                    <div class="test-info-title">
                        <i class="fas fa-info-circle"></i>
                        Test Information
                    </div>
                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-value"><%= test.quizId.title.length > 20 ? test.quizId.title.substring(0, 20) + '...' : test.quizId.title %></span>
                            <div class="info-label">Quiz Title</div>
                        </div>
                        <div class="info-item">
                            <span class="info-value">#<%= test.quizNumber %></span>
                            <div class="info-label">Quiz Number</div>
                        </div>
                        <div class="info-item">
                            <span class="info-value"><%= test.quizId.questions.length %></span>
                            <div class="info-label">Questions</div>
                        </div>
                        <div class="info-item">
                            <span class="info-value status-badge status-<%= test.status %>">
                                <%= test.status.charAt(0).toUpperCase() + test.status.slice(1) %>
                            </span>
                            <div class="info-label">Status</div>
                        </div>
                    </div>
                </div>

                <!-- Instructions -->
                <div class="alert alert-custom alert-info-custom">
                    <div class="d-flex align-items-start">
                        <i class="fas fa-lightbulb me-3 mt-1"></i>
                        <div>
                            <strong>Instructions:</strong>
                            <ul class="mb-0 mt-2">
                                <li>Enter your name to join the test</li>
                                <% if (test.mode === 'online') { %>
                                    <li>You'll be placed in a waiting room until the test starts</li>
                                    <li>Follow the admin's instructions during the test</li>
                                <% } else { %>
                                    <li>You can start the test immediately after joining</li>
                                    <li>Complete the test at your own pace</li>
                                <% } %>
                                <li>Make sure you have a stable internet connection</li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Join Form -->
                <form id="joinTestForm">
                    <div class="form-floating">
                        <input type="text" 
                               class="form-control" 
                               id="participantName" 
                               name="participantName"
                               placeholder="Your Name" 
                               maxlength="50"
                               required>
                        <label for="participantName">Your Name</label>
                    </div>

                    <button type="submit" class="btn btn-join" id="joinTestBtn">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        Join Test
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('joinTestForm');
        const nameInput = document.getElementById('participantName');
        const joinBtn = document.getElementById('joinTestBtn');
        const testCode = '<%= test.testCode %>';
        let isSubmitting = false;

        // Form validation
        nameInput.addEventListener('input', function() {
            const isValid = this.value.trim().length >= 2;
            joinBtn.disabled = !isValid || isSubmitting;
        });

        // Form submission with better error handling
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (isSubmitting) return; // Prevent double submission
            
            const participantName = nameInput.value.trim();
            
            if (participantName.length < 2) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Name',
                    text: 'Please enter a name with at least 2 characters.',
                    confirmButtonColor: '#667eea'
                });
                return;
            }

            isSubmitting = true;

            // Show loading state
            const originalContent = joinBtn.innerHTML;
            joinBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Joining Test...';
            joinBtn.disabled = true;

            // Clear any existing session data
            sessionStorage.removeItem('testSession');

            // Connect to Socket.IO with retry logic
            const socket = io({
                transports: ['websocket', 'polling'],
                timeout: 10000,
                reconnection: false // Disable auto reconnection for join process
            });
            
            let joinTimeout = setTimeout(() => {
                socket.disconnect();
                handleJoinError(new Error('Connection timeout'), socket, originalContent);
            }, 15000); // 15 second timeout

            socket.on('connect', () => {
                console.log('Connected to server, attempting to join...');
                
                socket.emit('participant:join', {
                    testCode: testCode,
                    participantName: participantName
                });
            });

            // Handle successful join
            socket.on('participant:joined', function(data) {
                clearTimeout(joinTimeout);
                console.log('Successfully joined test:', data);
                
                // Store participant data
                sessionStorage.setItem('testSession', JSON.stringify({
                    testCode: testCode,
                    participantName: participantName,
                    participant: data.participant
                }));
                
                // Show success message briefly
                Swal.fire({
                    icon: 'success',
                    title: 'Joined Successfully!',
                    text: 'Redirecting to test room...',
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => {
                    // Redirect to test room
                    window.location.href = `/test/room/${testCode}`;
                });
            });

            // Handle errors with specific messages
            socket.on('error', function(error) {
                clearTimeout(joinTimeout);
                console.error('Join error:', error);
                handleJoinError(error, socket, originalContent);
            });

            // Handle connection errors
            socket.on('connect_error', function(error) {
                clearTimeout(joinTimeout);
                console.error('Connection error:', error);
                handleJoinError({
                    message: 'Unable to connect to the test server. Please check your internet connection and try again.'
                }, socket, originalContent);
            });

            socket.on('disconnect', function(reason) {
                clearTimeout(joinTimeout);
                if (reason !== 'io client disconnect') {
                    console.error('Unexpected disconnect:', reason);
                    handleJoinError({
                        message: 'Connection was lost while joining. Please try again.'
                    }, socket, originalContent);
                }
            });
        });

        function handleJoinError(error, socket, originalContent) {
            if (isSubmitting) {
                isSubmitting = false;
                
                // Disconnect socket
                if (socket) {
                    socket.disconnect();
                }
                
                let errorMessage = 'Failed to join test. Please try again.';
                let errorTitle = 'Join Failed';
                
                // Handle specific error messages
                if (error.message) {
                    if (error.message.includes('Name already taken')) {
                        errorTitle = 'Name Unavailable';
                        errorMessage = 'This name is already being used by another participant. Please choose a different name.';
                        // Clear the name input
                        nameInput.value = '';
                        nameInput.focus();
                    } else if (error.message.includes('Test is full')) {
                        errorTitle = 'Test Full';
                        errorMessage = 'This test session is full. Please try again later or contact your instructor.';
                    } else if (error.message.includes('Test has already started')) {
                        errorTitle = 'Test In Progress';
                        errorMessage = 'This test has already started and is no longer accepting new participants.';
                    } else if (error.message.includes('Test has already completed')) {
                        errorTitle = 'Test Completed';
                        errorMessage = 'This test has already finished.';
                        // Redirect to results page after a delay
                        setTimeout(() => {
                            window.location.href = `/test/results/${testCode}`;
                        }, 3000);
                    } else if (error.message.includes('Connection timeout') || error.message.includes('Unable to connect')) {
                        errorTitle = 'Connection Error';
                        errorMessage = 'Unable to connect to the test server. Please check your internet connection and try again.';
                    } else {
                        errorMessage = error.message;
                    }
                }
                
                Swal.fire({
                    icon: 'error',
                    title: errorTitle,
                    text: errorMessage,
                    confirmButtonColor: '#667eea',
                    confirmButtonText: 'Try Again'
                }).then(() => {
                    // Reset button only if not redirecting
                    if (!errorMessage.includes('finished')) {
                        joinBtn.innerHTML = originalContent;
                        nameInput.dispatchEvent(new Event('input')); // Revalidate
                    }
                });
            }
        }

        // Initial validation
        nameInput.dispatchEvent(new Event('input'));

        // Auto-focus name input
        nameInput.focus();

        // Handle page visibility change (detect if user switches tabs)
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible' && nameInput) {
                nameInput.focus();
            }
        });

        // Prevent form submission on Enter if invalid
        nameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (!joinBtn.disabled) {
                    form.dispatchEvent(new Event('submit'));
                }
            }
        });

        // Add character counter
        nameInput.addEventListener('input', function() {
            const currentLength = this.value.length;
            const maxLength = 50;
            
            // Remove existing counter
            const existingCounter = document.getElementById('nameCounter');
            if (existingCounter) {
                existingCounter.remove();
            }
            
            if (currentLength > 0) {
                const counter = document.createElement('small');
                counter.id = 'nameCounter';
                counter.className = currentLength >= maxLength ? 'text-danger' : 'text-muted';
                counter.textContent = `${currentLength}/${maxLength} characters`;
                counter.style.cssText = 'position: absolute; bottom: -20px; right: 0; font-size: 0.75rem;';
                
                this.parentElement.style.position = 'relative';
                this.parentElement.appendChild(counter);
            }
        });

        // Handle browser back button
        window.addEventListener('popstate', function(event) {
            // Clear session data if user goes back
            sessionStorage.removeItem('testSession');
        });
    });
    </script>
</body>
</html>