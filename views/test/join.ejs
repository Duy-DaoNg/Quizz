<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bootstrap-4/bootstrap-4.css" rel="stylesheet">
    
    <style>

    </style>
</head>
<body>
    <div class="join-container fade-in">
        <div class="card join-card">
            <div class="card-header">

                <div class="header-icon">
                    <% if (test.mode === 'online') { %>
                        <i class="fas fa-rocket"></i>
                    <% } else { %>
                        <i class="fas fa-clock"></i>
                    <% } %>
                </div>
                <h1 class="card-title">Join Test</h1>
                <div class="test-code-badge"><%= test.testCode %></div>
            </div>
            
            <div class="card-body">
                <!-- Instructions -->
                <div class="alert alert-custom alert-info-custom">
                    <div class="d-flex align-items-start">
                        <div>
                            <i class="fas fa-lightbulb me-3 mt-1"></i>
                            <strong>Instructions:</strong>
                            <ul class="mb-0 mt-2">
                                <li>Enter your name to join the test</li>
                                <% if (test.mode === 'online') { %>
                                    <li>You'll be placed in a waiting room until the test starts</li>
                                    <li>Follow along with the instructor's guidance</li>
                                <% } else { %>
                                    <li>You'll start the test immediately after joining</li>
                                    <li>Complete the test at your own pace</li>
                                    <li>Questions will auto-advance when time expires</li>
                                <% } %>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Join Form -->
                <form id="joinTestForm">
                    <!-- Show error message if any -->
                    <% if (typeof error !== 'undefined' && error) { %>
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <%= error %>
                    </div>
                    <% } %>

                    <div class="form-floating">
                        <input type="text" 
                               class="form-control" 
                               id="participantName" 
                               name="participantName"
                               placeholder="Your Name" 
                               maxlength="50"
                               required>
                        <label for="participantName">Your Name</label>
                    </div>

                    <button type="submit" class="btn btn-join" id="joinTestBtn">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        <% if (test.mode === 'online') { %>
                            Join Test Room
                        <% } else { %>
                            Start Test
                        <% } %>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('joinTestForm');
            const nameInput = document.getElementById('participantName');
            const joinBtn = document.getElementById('joinTestBtn');
            const testCode = '<%= test.testCode %>';
            const testMode = '<%= test.mode %>';
            let isSubmitting = false;

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (isSubmitting) return;
                
                const participantName = nameInput.value.trim();
                
                if (participantName.length < 2) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Name',
                        text: 'Please enter a name with at least 2 characters.',
                        confirmButtonColor: '#667eea'
                    });
                    return;
                }

                isSubmitting = true;

                // Show loading state
                const originalContent = joinBtn.innerHTML;
                joinBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Preparing...';
                joinBtn.disabled = true;

                // First validate test availability and name uniqueness
                fetch('/test/validate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        testCode: testCode, 
                        participantName: participantName 
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Store participant data for room page
                        sessionStorage.setItem('testSession', JSON.stringify({
                            testCode: testCode,
                            participantName: participantName,
                            readyToJoin: true, // Flag to indicate ready to join
                            validated: true,   // Flag to indicate validation passed
                            timestamp: Date.now() // For session timeout
                        }));

                        // Show enhanced success message with mode-specific messaging
                        const successTitle = testMode === 'online' ? 'Ready to Join!' : 'Ready to Start!';
                        const successText = testMode === 'online' ? 
                            'Redirecting to test room...' : 
                            'Starting your quiz now...';

                        Swal.fire({
                            icon: 'success',
                            title: successTitle,
                            text: successText,
                            timer: 1000,
                            showConfirmButton: false
                        }).then(() => {
                            // Direct redirect - mode will be handled by controller
                            window.location.href = `/test/room/${testCode}`;
                        });
                    } else {
                        throw new Error(data.message);
                    }
                })
                .catch(error => {
                    console.error('Validate test error:', error);
                    
                    isSubmitting = false;
                    joinBtn.innerHTML = originalContent;
                    joinBtn.disabled = false;
                    
                    let errorTitle = 'Validation Failed';
                    let errorText = error.message || 'Please check your information and try again.';
                    
                    // Handle specific error types with better UX
                    if (error.message && error.message.includes('name is already taken')) {
                        errorTitle = 'Name Unavailable';
                        errorText = 'This name is already being used by another participant. Please choose a different name.';
                        // Clear and focus on name input for immediate retry
                        setTimeout(() => {
                            nameInput.value = '';
                            nameInput.focus();
                            // Trigger validation
                            nameInput.dispatchEvent(new Event('input'));
                        }, 100);
                    } else if (error.message && error.message.includes('Test is full')) {
                        errorTitle = 'Test Full';
                        errorText = 'This test session is full. Please try again later or contact your instructor.';
                    } else if (error.message && error.message.includes('Test has already started')) {
                        errorTitle = 'Test Started';
                        if (testMode === 'online') {
                            errorText = 'This test has already started and is no longer accepting new participants.';
                        } else {
                            errorText = 'This test session is currently in progress.';
                        }
                    } else if (error.message && error.message.includes('Test not found')) {
                        errorTitle = 'Test Not Found';
                        errorText = 'No test found with this code. Please check the code and try again.';
                    } else if (error.message && error.message.includes('Test has not started yet')) {
                        errorTitle = 'Test Not Started';
                        errorText = 'This test is scheduled but has not started yet. Please wait for the scheduled start time.';
                    } else if (error.message && error.message.includes('Test has expired')) {
                        errorTitle = 'Test Expired';
                        errorText = 'This test session has ended and is no longer available.';
                    } else if (error.message && error.message.includes('Test has been cancelled')) {
                        errorTitle = 'Test Cancelled';
                        errorText = 'This test session has been cancelled by the administrator.';
                    }
                    
                    Swal.fire({
                        icon: 'error',
                        title: errorTitle,
                        text: errorText,
                        confirmButtonColor: '#667eea',
                        confirmButtonText: 'Try Again'
                    });
                });
            });

            // Initial validation
            nameInput.dispatchEvent(new Event('input'));
            nameInput.focus();

            // Handle character counter and other existing functionality...
            nameInput.addEventListener('input', function() {
                const currentLength = this.value.length;
                const maxLength = 50;
                
                const existingCounter = document.getElementById('nameCounter');
                if (existingCounter) {
                    existingCounter.remove();
                }
                
                if (currentLength > 0) {
                    const counter = document.createElement('small');
                    counter.id = 'nameCounter';
                    counter.className = currentLength >= maxLength ? 'text-danger' : 'text-muted';
                    counter.textContent = `${currentLength}/${maxLength} characters`;
                    counter.style.cssText = 'position: absolute; bottom: -20px; right: 0; font-size: 0.75rem;';
                    
                    this.parentElement.style.position = 'relative';
                    this.parentElement.appendChild(counter);
                }
            });

            // Prevent form submission on Enter if invalid
            nameInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (!joinBtn.disabled) {
                        form.dispatchEvent(new Event('submit'));
                    }
                }
            });

            // Handle browser back button
            window.addEventListener('popstate', function(event) {
                sessionStorage.removeItem('testSession');
            });
        });
    </script>
</body>
</html>